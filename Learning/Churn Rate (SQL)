--1
 SELECT*
 FROM subscriptions
 LIMIT 100;
 
--2
 SELECT DISTINCT strftime('%m', subscription_start) AS 'Months of Start'
 FROM subscriptions
 ORDER BY strftime('%y', subscription_start);
 
 SELECT DISTINCT strftime('%m', subscription_end) AS 'Months of End'
 FROM subscriptions
 ORDER BY strftime('%y', subscription_end);
 
 --3 to 8
WITH months AS(
 SELECT
  '2017-01-01' AS first_day,
  '2017-01-31' AS last_day
 UNION
  SELECT
  '2017-02-01' AS first_day,
  '2017-02-28' AS last_day
 UNION
  SELECT
  '2017-03-01' AS first_day,
  '2017-03-31' AS last_day
  ),
 cross_join AS (
 SELECT *
 FROM subscriptions
 CROSS JOIN months
   ),
 status AS (
 SELECT id, first_day AS month,
  CASE WHEN subscription_start < first_day
   AND (subscription_end > first_day
         OR subscription_end IS NULL)
   AND (segment = 87)
     THEN 1
     ELSE 0
     END AS is_active_87,
   CASE WHEN subscription_start < first_day
   AND (subscription_end > first_day
         OR subscription_end IS NULL) 
   AND (segment = 30)
     THEN 1
     ELSE 0
     END AS is_active_30,
   CASE WHEN subscription_start < first_day
    AND (subscription_end BETWEEN first_day AND last_day) 
    AND (segment = 87)
     THEN 1
     ELSE 0
     END AS is_canceled_87,
    CASE WHEN subscription_start < first_day
   AND (subscription_end BETWEEN first_day AND last_day) 
   AND (segment = 30)
     THEN 1
     ELSE 0
     END AS is_canceled_30
   FROM cross_join
 ),
 status_aggregate AS(
  SELECT month, SUM(is_active_87) AS sum_active_87, SUM(is_active_30) AS sum_active_30, SUM(is_canceled_87) AS sum_canceled_87, SUM(is_canceled_30) AS sum_canceled_30
  FROM status   
  GROUP BY 1
  )
  SELECT month, 1.0*sum_canceled_87/sum_active_87 AS 'Churn Rate for 87', 
 1.0*sum_canceled_30/sum_active_30 AS 'Churn   Rate for 30'
   FROM status_aggregate;
   
 --9  
WITH months AS(
 SELECT
  '2017-01-01' AS first_day,
  '2017-01-31' AS last_day
 UNION
  SELECT
  '2017-02-01' AS first_day,
  '2017-02-28' AS last_day
 UNION
  SELECT
  '2017-03-01' AS first_day,
  '2017-03-31' AS last_day
  ),
 cross_join AS(
 SELECT *
 FROM subscriptions
 CROSS JOIN months
  ),
  status AS(
  SELECT id, first_day AS month, segment,
  CASE WHEN subscription_start < first_day
   AND (subscription_end > first_day
         OR subscription_end IS NULL)
     THEN 1
     ELSE 0
     END AS is_active,
   CASE WHEN subscription_start < first_day
    AND (subscription_end BETWEEN first_day AND last_day)
     THEN 1
     ELSE 0
     END AS is_canceled
   FROM cross_join
   ),
   status_aggregate AS(
    SELECT month, 
           SUM(is_active) AS sum_active,
           SUM(is_canceled) AS sum_canceled, segment
  FROM status
  GROUP BY month, segment
     )
     SELECT strftime('%m', month) AS 'month',
     segment, 1.0*sum_canceled/sum_active
     FROM status_aggregate;
 
 
 
 
  
 
 
 
